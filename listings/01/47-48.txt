//: C01:BadException.cpp {-bor}
#include <exception>    // Для std::bad_exception
#include <iostream>
#include <cstdio>
using namespace std;

// Классы исключений:
class A {};
class B {};

// Обработчик terminate()
void my_thandler() {
  cout << "terminate called\n";
  exit(0);
}

// Обработчик unexpected()
void my_uhandler1() {
  throw A();
}
void my_uhandler2() {
  throw;
}

// Если включить эту команду throw в f или g,
// компилятор распознает нарушение и сообщит об ошибке,
// поэтому мы выделяем ее в отдельную функцию.
void t() {
  throw B();
}

void f() throw(A) {
  t();
}
void g() throw(A, bad_exception) {
  t();
}

int main() {
  set_terminate(my_thandler);
  set_unexpected(my_uhandler1);
  try {
    f();
  }
  catch (A&) {
    cout << "caught an A from f\n";
  }
  set_unexpected(my_uhandler2);
  try {
    g();
  }
  catch (bad_exception&) {
    cout << "caught a bad_exception from g\n";
  }
  try {
    f();
  }
  catch (...) {
    cout << "This will never print\n";
  }
} ///:~
