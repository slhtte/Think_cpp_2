//: C09:Paste.cpp
//{L} Vendor
// Решение проблемы с использованием
// множественного наследования
#include <iostream>
#include "Vendor.h"
using namespace std;

class MyBase { // Исправление интерфейса Vendor
public:
  virtual void v() const = 0;
  virtual void f() const = 0;
  // Новая интерфейсная функция:
  virtual void g() const = 0;
  virtual ~MyBase() { cout << "~MyBase()\n"; }
};

class Paste1 : public MyBase, public Vendor1 {
public:
  void v() const {
    cout << "Paste1::v()" << endl;
    Vendor1::v();
  }
  void f() const {
    cout << "Paste1::f()" << endl;
    Vendor1::f();
  }
  void g() const {
    cout << "Paste1::g()" << endl;
  }
  ~Paste1() { cout << "~Paste1()" << endl; }
};

int main() {
  Paste1& p1p = *new Paste1;
  MyBase& mp = p1p; // Повышающее преобразование
  cout << "calling f()\n";
  mp.f();  // Правильное поведение
  cout << "calling g()\n";
  mp.g(); // Новое поведение
  cout << "calling A(p1p)\n";
  A(p1p); // Старое поведение
  cout << "calling B(p1p)\n";
  B(p1p);  // Старое поведение
  cout << "delete mp\n";
  // Удаление ссылки на объект в куче:
  delete &mp; // Правильное поведение
} ///:~