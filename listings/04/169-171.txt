//: C04:Showerr.cpp
// Удаление комментариев из строк с ошибками компиляции
#include <cstddef>
#include <cstdlib>
#include <cstdio>
#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include "../require.h"
using namespace std;

const string usage =
  "usage: showerr filename chapnum\n"
  "where filename is a C++ source file\n"
  "and chapnum is the chapter name it's in.\n"
  "Finds lines commented with //! and removes\n"
  "comment, appending //(#) where # is unique\n"
  "across all files, so you can determine\n"
  "if your compiler finds the error.\n"
  "showerr /r\n"
  "resets the unique counter.";

class Showerr {
  const int CHAP;
  const string MARKER, FNAME;
  // Файл со счетчиком номеров ошибок:
  const string ERRNUM;
  // Файл с ошибочными строками:
  const string ERRFILE;
  stringstream edited; // Измененный файл
  int counter;
public:
  Showerr(const string& f, const string& en,
    const string& ef, int c) : CHAP(c), MARKER("//!"),
    FNAME(f), ERRNUM(en), ERRFILE(ef), counter(0) {}
  void replaceErrors() {
    ifstream infile(FNAME.c_str());
    assure(infile, FNAME.c_str());
    ifstream count(ERRNUM.c_str());
    if(count) count >> counter;
    int linecount = 1;
    string buf;
    ofstream errlines(ERRFILE.c_str(), ios::app);
    assure(errlines, ERRFILE.c_str());
    while(getline(infile, buf)) {
      // Поиск маркера в начале строки:
      size_t pos = buf.find(MARKER);
      if(pos != string::npos) {
        // Удаление маркера:
        buf.erase(pos, MARKER.size() + 1);
        // Присоединение счетчика и информации об ошибке:
        ostringstream out;
        out << buf << " // (" << ++counter << ") "
            << "Chapter " << CHAP
            << " File: " << FNAME
            << " Line " << linecount << endl;
        edited << out.str();
        errlines << out.str(); // Запись в файл ошибок
      }
      else
        edited << buf << "\n"; // Простое копирование
      linecount++;
    }
  }
  void saveFiles() {
    ofstream outfile(FNAME.c_str()); // Перезапись
    assure(outfile, FNAME.c_str());
    outfile << edited.rdbuf();
    ofstream count(ERRNUM.c_str()); // Перезапись
    assure(count, ERRNUM.c_str());
    count << counter; // Сохранение нового счетчика
  }
};

int main(int argc, char* argv[]) {
  const string ERRCOUNT("../errnum.txt"),
    ERRFILE("../errlines.txt");
  requireMinArgs(argc, 1, usage.c_str());
  if(argv[1][0] == '/' || argv[1][0] == '-') {
    // Другие ключи:
    switch(argv[1][1]) {
      case 'r': case 'R':
        cout << "reset counter" << endl;
        remove(ERRCOUNT.c_str()); // Удаление файлов
        remove(ERRFILE.c_str());
        return 0;
      default:
        cerr << usage << endl;
        return 1;
    }
  }
  if (argc == 3) {
    Showerr s(argv[1], ERRCOUNT, ERRFILE, atoi(argv[2]));
    s.replaceErrors();
    s.saveFiles();
  }
} ///:~